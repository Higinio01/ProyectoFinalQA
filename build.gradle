plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.boot' version '3.3.0'
    id 'org.owasp.dependencycheck' version '10.0.3'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.modelmapper:modelmapper:3.2.3'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'


    // JWT - Dependencias correctas para Spring Boot 3.x
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Testing
    testImplementation platform('org.junit:junit-bom:5.13.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.cucumber:cucumber-java:7.23.0'
    testImplementation 'io.cucumber:cucumber-spring:7.23.0'
    testImplementation 'io.cucumber:cucumber-junit:7.23.0'

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.postgresql:postgresql'

    runtimeOnly 'org.owasp:dependency-check-gradle:10.0.3'
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
    }

    if (project.hasProperty("profile")) {
        systemProperty "spring.profiles.active", project.getProperty("profile")
    }
}


dependencyCheck {
    formats = ['HTML', 'JSON', 'XML']
    failBuildOnCVSS = 11.0
    suppressionFile = null
    scanConfigurations = ['runtimeClasspath']
    autoUpdate = false


}