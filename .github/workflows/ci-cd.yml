name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      db_test:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: inventario_db_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/inventario_db_test
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Wait for PostgreSQL (db_test)
        run: |
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "Esperando a db_test..."
            sleep 2
          done

      - name: Run Flyway migrations (test)
        run: ./gradlew flywayMigrate -PflywayUrl=jdbc:postgresql://localhost:5433/inventario_db_test -PflywayUser=postgres -PflywayPassword=admin

      - name: Build & Run unit tests
        run: ./gradlew clean build test

  stress-test:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Descargar y configurar JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Iniciar servicios con Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d
          echo "Esperando a que la app esté disponible..."
          for i in {1..20}; do
            if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "App está arriba ✅"
              break
            fi
            echo "Esperando app..."
            sleep 5
          done

      - name: Ejecutar prueba de estrés con JMeter
        run: |
          mkdir -p jmeter/reporte-html
          apache-jmeter-5.6.3/bin/jmeter \
            -n \
            -t jmeter/Inventario_testplan.jmx \
            -l jmeter/resultados.jtl \
            -e -o jmeter/reporte-html

      - name: Guardar reporte como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: reporte-jmeter
          path: jmeter/reporte-html

      - name: Apagar contenedores
        if: always()
        run: docker compose -f docker-compose.yml down