name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'admin' }}
          POSTGRES_DB: inventario_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/inventario_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD || 'admin' }}

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Flyway migrations
        run: ./gradlew flywayMigrate

      - name: Build & Run tests
        run: ./gradlew clean build test

      - name: Generate version
        id: version
        run: echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 15
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  stress-test:
    runs-on: ubuntu-latest
    needs: docker-build-push
    timeout-minutes: 25
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose-plugin -y

      - name: Create environment file
        run: |
          echo "APP_VERSION=${{ needs.build-and-test.outputs.version }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD || 'admin' }}" >> .env

      - name: Start services
        run: docker compose up -d

      - name: Wait for application
        run: |
          echo "⏳ Waiting for application..."
          for i in {1..30}; do
            if curl -sf http://localhost:8080/actuator/health > /dev/null; then
              echo "Application is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Application failed to start"
              docker compose logs
              exit 1
            fi
            echo "⏳ Attempt $i/30: waiting..."
            sleep 10
          done

      - name: Setup JMeter
        uses: actions/cache@v4
        id: jmeter-cache
        with:
          path: apache-jmeter-5.6.3
          key: jmeter-5.6.3

      - name: Download JMeter
        if: steps.jmeter-cache.outputs.cache-hit != 'true'
        run: |
          wget -q https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Run stress tests
        run: |
          mkdir -p jmeter/reports
          apache-jmeter-5.6.3/bin/jmeter \
            -n -t jmeter/Inventario_testplan.jmx \
            -l jmeter/results.jtl \
            -e -o jmeter/reports

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jmeter-reports
          path: jmeter/reports/

      - name: Cleanup
        if: always()
        run: docker compose down -v