name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      db_test:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: inventario_db_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/inventario_db_test
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Wait for PostgreSQL (db_test)
        run: |
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "Esperando a db_test..."
            sleep 2
          done

      - name: Run Flyway migrations (test)
        run: ./gradlew flywayMigrate -PflywayUrl=jdbc:postgresql://localhost:5433/inventario_db_test -PflywayUser=postgres -PflywayPassword=admin

      - name: Build & Run unit tests
        run: ./gradlew clean build test

      - name: Run acceptance tests (Cucumber)
        run: ./gradlew test --tests "*CucumberTest*"
        continue-on-error: true

      - name: Generate test summary
        run: |
          echo "## 📊 Resumen de Pruebas" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Contar pruebas JUnit
          if [ -d "build/test-results/test" ]; then
            JUNIT_TOTAL=$(find build/test-results/test -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            JUNIT_FAILURES=$(find build/test-results/test -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            JUNIT_ERRORS=$(find build/test-results/test -name "*.xml" -exec grep -h "errors=" {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
            JUNIT_SUCCESS=$((JUNIT_TOTAL - JUNIT_FAILURES - JUNIT_ERRORS))
          
            echo "### 🧪 Pruebas Unitarias (JUnit)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Exitosas: ${JUNIT_SUCCESS:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Fallidas: ${JUNIT_FAILURES:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Errores: ${JUNIT_ERRORS:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 Total: ${JUNIT_TOTAL:-0}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Verificar si existen reportes de Cucumber
          if [ -f "build/reports/cucumber-report.html" ]; then
            echo "### 🥒 Pruebas de Aceptación (Cucumber)" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 Reporte generado exitosamente" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🥒 Pruebas de Aceptación (Cucumber)" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ No se encontraron reportes de Cucumber" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Resultados de Pruebas JUnit'
          path: 'build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Guardar reportes JUnit como artefacto
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reportes-junit
          path: |
            build/reports/tests/test/
            build/test-results/test/
          retention-days: 30

      - name: Guardar reportes Cucumber como artefacto
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reportes-cucumber
          path: |
            build/reports/cucumber-report.html
            build/reports/cucumber/
          retention-days: 30

      - name: Guardar logs de pruebas (en caso de fallo)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs-pruebas
          path: |
            build/reports/
            *.log

  stress-test:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Descargar y configurar JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz

      - name: Iniciar servicios con Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Verificar estado de contenedores
        run: |
          echo "=== Estado de contenedores ==="
          docker compose ps
          echo ""
          echo "=== Logs de la base de datos ==="
          docker compose logs db
          echo ""
          echo "=== Logs de la aplicación ==="
          docker compose logs app

      - name: Esperar y verificar conectividad
        run: |
          echo "Esperando a que la app esté disponible..."
          
          # Verificar que la BD esté lista
          echo "Verificando PostgreSQL..."
          for i in {1..30}; do
            if docker compose exec -T db pg_isready -U postgres; then
              echo "PostgreSQL está listo ✅"
              break
            fi
            echo "Esperando PostgreSQL... Intento $i de 30"
            sleep 5
          done
          
          # Dar tiempo adicional para que la app se conecte a la BD
          echo "Dando tiempo para que la app se conecte a la BD..."
          sleep 30
          
          # Verificar logs de la aplicación nuevamente
          echo "=== Logs recientes de la aplicación ==="
          docker compose logs --tail=50 app
          
          # Intentar conectarse a la aplicación
          for i in {1..60}; do
            echo "Intento $i de 60 - Verificando aplicación..."
          
            # Primero verificar que el contenedor esté corriendo
            if ! docker compose ps app | grep -q "Up"; then
              echo "❌ El contenedor de la aplicación no está corriendo"
              docker compose logs app
              exit 1
            fi
          
            # Verificar conectividad básica al puerto
            if nc -z localhost 8080; then
              echo "Puerto 8080 está abierto ✅"
          
              # Intentar el endpoint de login
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/api/auth/login \
                -H "Content-Type: application/json" \
                -d '{"email": "admin@example.com", "password": "admin"}' || echo "000")
          
              echo "Código de respuesta del login: $HTTP_CODE"
          
              if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "400" ] || [ "$HTTP_CODE" = "401" ]; then
                echo "Aplicación está respondiendo ✅"
                break
              fi
            else
              echo "Puerto 8080 no está disponible"
            fi
          
            if [ $i -eq 60 ]; then
              echo "❌ La aplicación no respondió después de 10 minutos"
              echo "=== Logs finales de la aplicación ==="
              docker compose logs app
              echo "=== Estado final de contenedores ==="
              docker compose ps
              exit 1
            fi
          
            sleep 10
          done

      - name: Ejecutar prueba de estrés con JMeter
        run: |
          mkdir -p jmeter/reporte-html
          apache-jmeter-5.6.3/bin/jmeter \
            -n \
            -t jmeter/Inventario_testplan.jmx \
            -l jmeter/resultados.jtl \
            -e -o jmeter/reporte-html

      - name: Generar resumen de pruebas de estrés
        run: |
          echo "## 🚀 Resumen de Pruebas de Estrés (JMeter)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "jmeter/resultados.jtl" ]; then
            # Análisis básico del archivo JTL
            TOTAL_REQUESTS=$(tail -n +2 jmeter/resultados.jtl | wc -l)
            FAILED_REQUESTS=$(tail -n +2 jmeter/resultados.jtl | awk -F',' '$8 == "false" {count++} END {print count+0}')
            SUCCESS_REQUESTS=$((TOTAL_REQUESTS - FAILED_REQUESTS))
            SUCCESS_RATE=$(echo "scale=2; $SUCCESS_REQUESTS * 100 / $TOTAL_REQUESTS" | bc -l 2>/dev/null || echo "N/A")
          
            echo "### 📊 Estadísticas Generales" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 Total de peticiones: $TOTAL_REQUESTS" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Exitosas: $SUCCESS_REQUESTS" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Fallidas: $FAILED_REQUESTS" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Tasa de éxito: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Reporte HTML detallado disponible en los artefactos**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Guardar reporte JMeter como artefacto
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reporte-jmeter
          path: |
            jmeter/reporte-html/
            jmeter/resultados.jtl
          retention-days: 30

      - name: Guardar logs como artefacto (en caso de fallo)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: |
            docker-compose-logs.txt

      - name: Crear archivo de logs para artefacto
        if: failure()
        run: |
          docker compose logs > docker-compose-logs.txt

      - name: Apagar contenedores
        if: always()
        run: docker compose -f docker-compose.yml down

  publish-reports:
    runs-on: ubuntu-latest
    needs: [build-test, stress-test]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Descargar artefactos de JUnit
        uses: actions/download-artifact@v4
        with:
          name: reportes-junit
          path: reports/junit/
        continue-on-error: true

      - name: Descargar artefactos de Cucumber
        uses: actions/download-artifact@v4
        with:
          name: reportes-cucumber
          path: reports/cucumber/
        continue-on-error: true

      - name: Descargar artefactos de JMeter
        uses: actions/download-artifact@v4
        with:
          name: reporte-jmeter
          path: reports/jmeter/
        continue-on-error: true

      - name: Crear página de índice de reportes
        run: |
          mkdir -p reports
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Reportes de Pruebas - Proyecto Final QA</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; text-align: center; margin-bottom: 30px; }
                  .report-section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                  .report-section h2 { color: #0066cc; margin-top: 0; }
                  .report-links { margin: 10px 0; }
                  .report-links a { display: inline-block; margin: 5px 10px 5px 0; padding: 10px 20px; background: #0066cc; color: white; text-decoration: none; border-radius: 5px; }
                  .report-links a:hover { background: #0052a3; }
                  .status { padding: 5px 10px; border-radius: 3px; font-weight: bold; }
                  .success { background: #d4edda; color: #155724; }
                  .warning { background: #fff3cd; color: #856404; }
                  .error { background: #f8d7da; color: #721c24; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>📊 Reportes de Pruebas - Proyecto Final QA</h1>
          
                  <div class="report-section">
                      <h2>🧪 Pruebas Unitarias (JUnit)</h2>
                      <p>Pruebas automatizadas de componentes individuales del sistema.</p>
                      <div class="report-links">
                          <a href="junit/index.html" target="_blank">Ver Reporte HTML</a>
                      </div>
                  </div>
          
                  <div class="report-section">
                      <h2>🥒 Pruebas de Aceptación (Cucumber)</h2>
                      <p>Pruebas de comportamiento basadas en escenarios de usuario.</p>
                      <div class="report-links">
                          <a href="cucumber/cucumber-report.html" target="_blank">Ver Reporte HTML</a>
                      </div>
                  </div>
          
                  <div class="report-section">
                      <h2>🚀 Pruebas de Estrés (JMeter)</h2>
                      <p>Pruebas de rendimiento y carga del sistema.</p>
                      <div class="report-links">
                          <a href="jmeter/index.html" target="_blank">Ver Reporte HTML</a>
                          <a href="jmeter/resultados.jtl" target="_blank">Descargar Resultados JTL</a>
                      </div>
                  </div>
          
                  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
                      <p style="color: #666;">Generado automáticamente por GitHub Actions</p>
                      <p style="color: #666;">Fecha: $(date)</p>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Publicar reportes consolidados
        uses: actions/upload-artifact@v4
        with:
          name: reportes-consolidados
          path: reports/
          retention-days: 30