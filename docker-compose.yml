services:
  db:
    image: postgres:17-alpine
    container_name: inventario-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventario_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - inventario-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db_test:
    image: postgres:17-alpine
    container_name: inventario-db-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventario_db_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - inventario-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - testing

  app:
    image: higinio01/backend-qa:latest
    container_name: spring-inventario
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: inventario_db
      DB_USERNAME: postgres
      DB_PASSWORD: admin
      SERVER_PORT: 8080
      API_BASE_URL: "http://localhost:8080"
      API_VERSION: "v1"
      API_CONTEXT_PATH: "/api"
      JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      JPA_SHOW_SQL: "true"
      PARTNER_API_URL: "http://external-partner-api:8081"
      PARTNER_API_TIMEOUT: 5000
      PAYMENT_API_URL: "http://external-payment-gateway:8082"
      SPRING_PROFILES_ACTIVE: prod
    restart: unless-stopped
    command: [ "./wait-for-it.sh", "db:5432", "java", "-jar", "/app/app.jar" ]

  mock-partner-api:
    image: wiremock/wiremock:2.35.0
    container_name: mock-partner-api
    ports:
      - "8081:8080"
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings
      - ./wiremock/__files:/home/wiremock/__files
    command: ["--port", "8080", "--verbose"]
    profiles:
      - testing

  mock-payment-gateway:
    image: wiremock/wiremock:2.35.0
    container_name: mock-payment-gateway
    ports:
      - "8082:8080"
    command: ["--port", "8080", "--verbose"]
    profiles:
      - testing

  vue-app:
    image: smct0001/vue-app:latest
    container_name: vue-frontend
    ports:
      - "3000:80"
    restart: unless-stopped
    depends_on:
      - app

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - app
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

volumes:
  inventario-data:
  inventario-test-data:
  prometheus_data:
  grafana_data: